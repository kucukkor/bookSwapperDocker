{
  "reviews_api_documentation": {
    "overview": {
      "description": "Complete Reviews API documentation for Book Swap platform",
      "base_url": "http://localhost:3000/api",
      "authentication": "Bearer token required for all endpoints",
      "review_system": "Mandatory review system after trade completion"
    },
    "endpoints": {
      "get_pending_reviews": {
        "method": "GET",
        "endpoint": "/api/reviews/pending",
        "description": "Get all pending reviews for authenticated user",
        "authentication": "Required",
        "headers": {
          "Authorization": "Bearer YOUR_JWT_TOKEN",
          "Content-Type": "application/json"
        },
        "response_success": {
          "status": 200,
          "body": {
            "success": true,
            "data": [
              {
                "_id": "review_id",
                "tradeOffer": {
                  "_id": "offer_id",
                  "targetListing": {
                    "_id": "listing_id",
                    "bookTitle": "The Great Gatsby",
                    "author": "F. Scott Fitzgerald",
                    "images": ["image1.jpg"]
                  },
                  "offeredBook": {
                    "bookTitle": "1984",
                    "author": "George Orwell"
                  },
                  "fromUser": {
                    "_id": "user_id",
                    "username": "alice",
                    "firstName": "Alice",
                    "lastName": "Johnson",
                    "avatar": "avatar.jpg"
                  },
                  "toUser": {
                    "_id": "user_id",
                    "username": "bob",
                    "firstName": "Bob",
                    "lastName": "Smith",
                    "avatar": "avatar.jpg"
                  }
                },
                "reviewer": "current_user_id",
                "reviewee": "other_user_id",
                "createdAt": "2024-01-15T10:30:00.000Z",
                "reminderCount": 0
              }
            ]
          }
        },
        "response_error": {
          "status": 401,
          "body": {
            "success": false,
            "message": "Access denied. No token provided."
          }
        },
        "javascript_example": "const fetchPendingReviews = async () => { try { const token = localStorage.getItem('token'); const response = await fetch('/api/reviews/pending', { method: 'GET', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { setPendingReviews(data.data); } } catch (error) { console.error('Error fetching pending reviews:', error); } };",
        "react_component_example": "import React, { useState, useEffect } from 'react'; const PendingReviews = () => { const [pendingReviews, setPendingReviews] = useState([]); const [loading, setLoading] = useState(true); useEffect(() => { fetchPendingReviews(); }, []); const fetchPendingReviews = async () => { try { const token = localStorage.getItem('token'); const response = await fetch('/api/reviews/pending', { method: 'GET', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { setPendingReviews(data.data); } } catch (error) { console.error('Error:', error); } finally { setLoading(false); } }; if (loading) return <div>Loading pending reviews...</div>; return ( <div className=\"pending-reviews\"> <h2>Pending Reviews ({pendingReviews.length})</h2> {pendingReviews.length === 0 ? ( <p>No pending reviews</p> ) : ( pendingReviews.map(review => ( <div key={review._id} className=\"review-card\"> <h3>Review for {review.reviewee.firstName} {review.reviewee.lastName}</h3> <p>Trade: {review.tradeOffer.targetListing.bookTitle} ↔ {review.tradeOffer.offeredBook.bookTitle}</p> <button onClick={() => openReviewModal(review)}> Write Review </button> </div> )) )} </div> ); };"
      },
      "submit_review": {
        "method": "POST",
        "endpoint": "/api/reviews",
        "description": "Submit a review for a completed trade",
        "authentication": "Required",
        "headers": {
          "Authorization": "Bearer YOUR_JWT_TOKEN",
          "Content-Type": "application/json"
        },
        "request_body": {
          "tradeOfferId": "string (required) - ID of the completed trade offer",
          "revieweeId": "string (required) - ID of user being reviewed",
          "rating": "number (required) - Rating from 1 to 5",
          "comment": "string (optional) - Review comment, max 500 characters"
        },
        "request_example": {
          "tradeOfferId": "60f7b3b3b3b3b3b3b3b3b3b3",
          "revieweeId": "60f7b3b3b3b3b3b3b3b3b3b4",
          "rating": 5,
          "comment": "Great trader! Book was in excellent condition as described."
        },
        "response_success": {
          "status": 201,
          "body": {
            "success": true,
            "message": "Review submitted successfully",
            "data": {
              "_id": "review_id",
              "tradeOffer": "offer_id",
              "reviewer": "reviewer_id",
              "reviewee": "reviewee_id",
              "rating": 5,
              "comment": "Great trader! Book was in excellent condition as described.",
              "createdAt": "2024-01-15T10:30:00.000Z"
            }
          }
        },
        "response_errors": {
          "400_validation": {
            "status": 400,
            "body": {
              "success": false,
              "message": "Rating must be between 1 and 5"
            }
          },
          "400_already_reviewed": {
            "status": 400,
            "body": {
              "success": false,
              "message": "You have already reviewed this trade"
            }
          },
          "404_trade_not_found": {
            "status": 404,
            "body": {
              "success": false,
              "message": "Trade offer not found"
            }
          }
        },
        "validation_rules": {
          "tradeOfferId": "Must be valid MongoDB ObjectId",
          "revieweeId": "Must be valid MongoDB ObjectId",
          "rating": "Must be integer between 1 and 5",
          "comment": "Optional, max 500 characters"
        },
        "javascript_example": "const submitReview = async (reviewData) => { try { const token = localStorage.getItem('token'); const response = await fetch('/api/reviews', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify(reviewData) }); const data = await response.json(); if (data.success) { alert('Review submitted successfully!'); fetchPendingReviews(); } else { alert(data.message); } } catch (error) { console.error('Error submitting review:', error); } };",
        "react_component_example": "const ReviewModal = ({ review, onClose, onSubmit }) => { const [rating, setRating] = useState(5); const [comment, setComment] = useState(''); const [submitting, setSubmitting] = useState(false); const handleSubmit = async (e) => { e.preventDefault(); setSubmitting(true); const reviewData = { tradeOfferId: review.tradeOffer._id, revieweeId: review.reviewee._id, rating: parseInt(rating), comment: comment.trim() }; try { const token = localStorage.getItem('token'); const response = await fetch('/api/reviews', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify(reviewData) }); const data = await response.json(); if (data.success) { onSubmit(); onClose(); alert('Review submitted successfully!'); } else { alert(data.message); } } catch (error) { console.error('Error:', error); alert('Error submitting review'); } finally { setSubmitting(false); } }; return ( <div className=\"modal-overlay\"> <div className=\"modal\"> <h2>Review {review.reviewee.firstName} {review.reviewee.lastName}</h2> <p>Trade: {review.tradeOffer.targetListing.bookTitle} ↔ {review.tradeOffer.offeredBook.bookTitle}</p> <form onSubmit={handleSubmit}> <div className=\"rating-section\"> <label>Rating:</label> <select value={rating} onChange={(e) => setRating(e.target.value)}> <option value={5}>5 - Excellent</option> <option value={4}>4 - Good</option> <option value={3}>3 - Average</option> <option value={2}>2 - Poor</option> <option value={1}>1 - Very Poor</option> </select> </div> <div className=\"comment-section\"> <label>Comment (optional):</label> <textarea value={comment} onChange={(e) => setComment(e.target.value)} maxLength={500} placeholder=\"Share your experience with this trader...\" /> <small>{comment.length}/500 characters</small> </div> <div className=\"modal-actions\"> <button type=\"button\" onClick={onClose}>Cancel</button> <button type=\"submit\" disabled={submitting}> {submitting ? 'Submitting...' : 'Submit Review'} </button> </div> </form> </div> </div> ); };"
      },
      "get_received_reviews": {
        "method": "GET",
        "endpoint": "/api/reviews/received",
        "description": "Get all reviews received by authenticated user",
        "authentication": "Required",
        "headers": {
          "Authorization": "Bearer YOUR_JWT_TOKEN",
          "Content-Type": "application/json"
        },
        "query_parameters": {
          "page": "number (optional) - Page number, default: 1",
          "limit": "number (optional) - Items per page, default: 10, max: 50"
        },
        "response_success": {
          "status": 200,
          "body": {
            "success": true,
            "data": {
              "reviews": [
                {
                  "_id": "review_id",
                  "tradeOffer": {
                    "_id": "offer_id",
                    "targetListing": {
                      "bookTitle": "The Great Gatsby",
                      "author": "F. Scott Fitzgerald"
                    },
                    "offeredBook": {
                      "bookTitle": "1984",
                      "author": "George Orwell"
                    }
                  },
                  "reviewer": {
                    "_id": "reviewer_id",
                    "username": "alice",
                    "firstName": "Alice",
                    "lastName": "Johnson",
                    "avatar": "avatar.jpg"
                  },
                  "rating": 5,
                  "comment": "Great trader! Book was in excellent condition.",
                  "createdAt": "2024-01-15T10:30:00.000Z"
                }
              ],
              "pagination": {
                "currentPage": 1,
                "totalPages": 3,
                "totalReviews": 25,
                "hasNextPage": true,
                "hasPrevPage": false
              }
            }
          }
        },
        "javascript_example": "const fetchReceivedReviews = async (page = 1) => { try { const token = localStorage.getItem('token'); const response = await fetch(`/api/reviews/received?page=${page}&limit=10`, { method: 'GET', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { setReceivedReviews(data.data.reviews); setPagination(data.data.pagination); } } catch (error) { console.error('Error fetching received reviews:', error); } };"
      },
      "get_given_reviews": {
        "method": "GET",
        "endpoint": "/api/reviews/given",
        "description": "Get all reviews given by authenticated user",
        "authentication": "Required",
        "headers": {
          "Authorization": "Bearer YOUR_JWT_TOKEN",
          "Content-Type": "application/json"
        },
        "query_parameters": {
          "page": "number (optional) - Page number, default: 1",
          "limit": "number (optional) - Items per page, default: 10, max: 50"
        },
        "response_success": {
          "status": 200,
          "body": {
            "success": true,
            "data": {
              "reviews": [
                {
                  "_id": "review_id",
                  "tradeOffer": {
                    "_id": "offer_id",
                    "targetListing": {
                      "bookTitle": "The Great Gatsby",
                      "author": "F. Scott Fitzgerald"
                    },
                    "offeredBook": {
                      "bookTitle": "1984",
                      "author": "George Orwell"
                    }
                  },
                  "reviewee": {
                    "_id": "reviewee_id",
                    "username": "bob",
                    "firstName": "Bob",
                    "lastName": "Smith",
                    "avatar": "avatar.jpg"
                  },
                  "rating": 4,
                  "comment": "Good trader, fast communication.",
                  "createdAt": "2024-01-15T10:30:00.000Z"
                }
              ],
              "pagination": {
                "currentPage": 1,
                "totalPages": 2,
                "totalReviews": 15,
                "hasNextPage": true,
                "hasPrevPage": false
              }
            }
          }
        },
        "javascript_example": "const fetchGivenReviews = async (page = 1) => { try { const token = localStorage.getItem('token'); const response = await fetch(`/api/reviews/given?page=${page}&limit=10`, { method: 'GET', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { setGivenReviews(data.data.reviews); setPagination(data.data.pagination); } } catch (error) { console.error('Error fetching given reviews:', error); } };"
      },
      "get_user_public_reviews": {
        "method": "GET",
        "endpoint": "/api/users/:userId/reviews",
        "description": "Get public reviews for any user (for public profile page)",
        "authentication": "Not required",
        "headers": {
          "Content-Type": "application/json"
        },
        "path_parameters": {
          "userId": "string (required) - ID of the user whose reviews to fetch"
        },
        "query_parameters": {
          "page": "number (optional) - Page number, default: 1",
          "limit": "number (optional) - Items per page, default: 10, max: 50"
        },
        "response_success": {
          "status": 200,
          "body": {
            "success": true,
            "data": {
              "user": {
                "_id": "user_id",
                "username": "alice",
                "firstName": "Alice",
                "lastName": "Johnson",
                "avatar": "avatar.jpg",
                "rating": 4.5,
                "totalRatings": 20,
                "totalTrades": 25,
                "successfulTrades": 23
              },
              "reviews": [
                {
                  "_id": "review_id",
                  "reviewer": {
                    "_id": "reviewer_id",
                    "username": "bob",
                    "firstName": "Bob",
                    "lastName": "Smith",
                    "avatar": "avatar.jpg"
                  },
                  "rating": 5,
                  "comment": "Excellent trader! Highly recommended.",
                  "createdAt": "2024-01-15T10:30:00.000Z"
                }
              ],
              "pagination": {
                "currentPage": 1,
                "totalPages": 4,
                "totalReviews": 20,
                "hasNextPage": true,
                "hasPrevPage": false
              }
            }
          }
        },
        "javascript_example": "const fetchUserPublicReviews = async (userId, page = 1) => { try { const response = await fetch(`/api/users/${userId}/reviews?page=${page}&limit=10`, { method: 'GET', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { setUserProfile(data.data.user); setUserReviews(data.data.reviews); setPagination(data.data.pagination); } } catch (error) { console.error('Error fetching user reviews:', error); } };"
      }
    },
    "review_system_rules": {
      "mandatory_system": "Reviews are mandatory after trade completion",
      "rating_scale": "1-5 stars (1=Very Poor, 2=Poor, 3=Average, 4=Good, 5=Excellent)",
      "comment_length": "Optional comment, maximum 500 characters",
      "review_timing": "Reviews must be submitted after trade offer is accepted",
      "mutual_reviews": "Both users must review each other",
      "reminder_system": "System sends reminders for pending reviews",
      "rating_calculation": "User rating is average of all received ratings",
      "public_visibility": "Reviews are publicly visible on user profiles"
    },
    "complete_react_component": "import React, { useState, useEffect } from 'react'; const ReviewsPage = () => { const [activeTab, setActiveTab] = useState('pending'); const [pendingReviews, setPendingReviews] = useState([]); const [receivedReviews, setReceivedReviews] = useState([]); const [givenReviews, setGivenReviews] = useState([]); const [loading, setLoading] = useState(true); const [selectedReview, setSelectedReview] = useState(null); const [showReviewModal, setShowReviewModal] = useState(false); useEffect(() => { fetchAllReviews(); }, []); const fetchAllReviews = async () => { setLoading(true); try { await Promise.all([ fetchPendingReviews(), fetchReceivedReviews(), fetchGivenReviews() ]); } catch (error) { console.error('Error fetching reviews:', error); } finally { setLoading(false); } }; const fetchPendingReviews = async () => { try { const token = localStorage.getItem('token'); const response = await fetch('/api/reviews/pending', { method: 'GET', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { setPendingReviews(data.data); } } catch (error) { console.error('Error fetching pending reviews:', error); } }; const fetchReceivedReviews = async () => { try { const token = localStorage.getItem('token'); const response = await fetch('/api/reviews/received', { method: 'GET', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { setReceivedReviews(data.data.reviews); } } catch (error) { console.error('Error fetching received reviews:', error); } }; const fetchGivenReviews = async () => { try { const token = localStorage.getItem('token'); const response = await fetch('/api/reviews/given', { method: 'GET', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { setGivenReviews(data.data.reviews); } } catch (error) { console.error('Error fetching given reviews:', error); } }; const openReviewModal = (review) => { setSelectedReview(review); setShowReviewModal(true); }; const closeReviewModal = () => { setSelectedReview(null); setShowReviewModal(false); }; const handleReviewSubmitted = () => { fetchPendingReviews(); closeReviewModal(); }; const renderStars = (rating) => { return '★'.repeat(rating) + '☆'.repeat(5 - rating); }; if (loading) return <div>Loading reviews...</div>; return ( <div className=\"reviews-page\"> <h1>Reviews</h1> <div className=\"tabs\"> <button className={`tab ${activeTab === 'pending' ? 'active' : ''}`} onClick={() => setActiveTab('pending')} > Pending ({pendingReviews.length}) </button> <button className={`tab ${activeTab === 'received' ? 'active' : ''}`} onClick={() => setActiveTab('received')} > Received ({receivedReviews.length}) </button> <button className={`tab ${activeTab === 'given' ? 'active' : ''}`} onClick={() => setActiveTab('given')} > Given ({givenReviews.length}) </button> </div> <div className=\"tab-content\"> {activeTab === 'pending' && ( <div className=\"pending-reviews\"> {pendingReviews.length === 0 ? ( <p>No pending reviews</p> ) : ( pendingReviews.map(review => ( <div key={review._id} className=\"review-card\"> <h3>Review for {review.reviewee.firstName} {review.reviewee.lastName}</h3> <p>Trade: {review.tradeOffer.targetListing.bookTitle} ↔ {review.tradeOffer.offeredBook.bookTitle}</p> <button onClick={() => openReviewModal(review)}> Write Review </button> </div> )) )} </div> )} {activeTab === 'received' && ( <div className=\"received-reviews\"> {receivedReviews.length === 0 ? ( <p>No reviews received yet</p> ) : ( receivedReviews.map(review => ( <div key={review._id} className=\"review-card\"> <div className=\"reviewer-info\"> <img src={review.reviewer.avatar} alt=\"Avatar\" /> <span>{review.reviewer.firstName} {review.reviewer.lastName}</span> </div> <div className=\"rating\">{renderStars(review.rating)}</div> <p className=\"comment\">{review.comment}</p> <small>{new Date(review.createdAt).toLocaleDateString()}</small> </div> )) )} </div> )} {activeTab === 'given' && ( <div className=\"given-reviews\"> {givenReviews.length === 0 ? ( <p>No reviews given yet</p> ) : ( givenReviews.map(review => ( <div key={review._id} className=\"review-card\"> <div className=\"reviewee-info\"> <img src={review.reviewee.avatar} alt=\"Avatar\" /> <span>{review.reviewee.firstName} {review.reviewee.lastName}</span> </div> <div className=\"rating\">{renderStars(review.rating)}</div> <p className=\"comment\">{review.comment}</p> <small>{new Date(review.createdAt).toLocaleDateString()}</small> </div> )) )} </div> )} </div> {showReviewModal && selectedReview && ( <ReviewModal review={selectedReview} onClose={closeReviewModal} onSubmit={handleReviewSubmitted} /> )} </div> ); }; const ReviewModal = ({ review, onClose, onSubmit }) => { const [rating, setRating] = useState(5); const [comment, setComment] = useState(''); const [submitting, setSubmitting] = useState(false); const handleSubmit = async (e) => { e.preventDefault(); setSubmitting(true); const reviewData = { tradeOfferId: review.tradeOffer._id, revieweeId: review.reviewee._id, rating: parseInt(rating), comment: comment.trim() }; try { const token = localStorage.getItem('token'); const response = await fetch('/api/reviews', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify(reviewData) }); const data = await response.json(); if (data.success) { onSubmit(); alert('Review submitted successfully!'); } else { alert(data.message); } } catch (error) { console.error('Error:', error); alert('Error submitting review'); } finally { setSubmitting(false); } }; return ( <div className=\"modal-overlay\"> <div className=\"modal\"> <h2>Review {review.reviewee.firstName} {review.reviewee.lastName}</h2> <p>Trade: {review.tradeOffer.targetListing.bookTitle} ↔ {review.tradeOffer.offeredBook.bookTitle}</p> <form onSubmit={handleSubmit}> <div className=\"rating-section\"> <label>Rating:</label> <select value={rating} onChange={(e) => setRating(e.target.value)}> <option value={5}>5 - Excellent</option> <option value={4}>4 - Good</option> <option value={3}>3 - Average</option> <option value={2}>2 - Poor</option> <option value={1}>1 - Very Poor</option> </select> </div> <div className=\"comment-section\"> <label>Comment (optional):</label> <textarea value={comment} onChange={(e) => setComment(e.target.value)} maxLength={500} placeholder=\"Share your experience with this trader...\" /> <small>{comment.length}/500 characters</small> </div> <div className=\"modal-actions\"> <button type=\"button\" onClick={onClose}>Cancel</button> <button type=\"submit\" disabled={submitting}> {submitting ? 'Submitting...' : 'Submit Review'} </button> </div> </form> </div> </div> ); }; export default ReviewsPage;",
    "error_handling": {
      "common_errors": {
        "401": "Unauthorized - Invalid or missing token",
        "400": "Bad Request - Invalid data or validation error",
        "404": "Not Found - Trade offer or user not found",
        "500": "Internal Server Error - Server error"
      },
      "validation_errors": {
        "rating_range": "Rating must be between 1 and 5",
        "comment_length": "Comment cannot exceed 500 characters",
        "already_reviewed": "You have already reviewed this trade",
        "invalid_trade": "Trade offer not found or not accessible"
      }
    },
    "testing_scenarios": {
      "submit_review": {
        "valid_review": "Submit review with rating 5 and comment",
        "minimum_review": "Submit review with only rating (no comment)",
        "maximum_comment": "Submit review with 500 character comment",
        "invalid_rating": "Try to submit review with rating 0 or 6",
        "duplicate_review": "Try to submit review for already reviewed trade"
      },
      "fetch_reviews": {
        "empty_state": "User with no reviews",
        "pagination": "User with many reviews (test pagination)",
        "mixed_ratings": "User with various rating levels"
      }
    }
  }
} 